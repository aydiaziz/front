{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport class ImageProcessingService {\n  constructor(sanitazer) {\n    this.sanitazer = sanitazer;\n  }\n  createImages(post) {\n    const postImages = post.productimage;\n    const postImageToFileHandle = [];\n    for (let i = 0; i < postImages.length; i++) {\n      const imageFileData = postImages[i];\n      const imageBlob = this.dataURItoBlob(imageFileData.picByte, imageFileData.type);\n      const imageFile = new File([imageBlob], imageFileData.name, {\n        type: imageFileData.type\n      });\n      const finalFileHandle = {\n        file: imageFile,\n        url: this.sanitazer.bypassSecurityTrustResourceUrl(window.URL.createObjectURL(imageFile))\n      };\n      postImageToFileHandle.push(finalFileHandle);\n    }\n    post.productimage = postImageToFileHandle;\n    return post;\n  }\n  dataURItoBlob(picBytes, imageType) {\n    const byteString = window.atob(picBytes);\n    const arrayBuffer = new ArrayBuffer(byteString.length);\n    const int8Array = new Uint8Array(arrayBuffer);\n    for (let i = 0; i < byteString.length; i++) {\n      int8Array[i] = byteString.charCodeAt(i);\n    }\n    const blob = new Blob([int8Array], {\n      type: imageType\n    });\n    return blob;\n  }\n  static #_ = this.ɵfac = function ImageProcessingService_Factory(t) {\n    return new (t || ImageProcessingService)(i0.ɵɵinject(i1.DomSanitizer));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ImageProcessingService,\n    factory: ImageProcessingService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,sBAAsB;EAEjCC,YAAoBC,SAAsB;IAAtB,cAAS,GAATA,SAAS;EAAiB;EACvCC,YAAY,CAACC,IAAU;IAC5B,MAAMC,UAAU,GAAQD,IAAI,CAACE,YAAY;IACzC,MAAMC,qBAAqB,GAAc,EAAE;IAC3C,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACH,UAAU,CAACI,MAAM,EAACD,CAAC,EAAE,EAAC;MAClC,MAAME,aAAa,GAAGL,UAAU,CAACG,CAAC,CAAC;MAEnC,MAAMG,SAAS,GAAC,IAAI,CAACC,aAAa,CAACF,aAAa,CAACG,OAAO,EAAEH,aAAa,CAACI,IAAI,CAAC;MAC7E,MAAMC,SAAS,GAAC,IAAIC,IAAI,CAAC,CAACL,SAAS,CAAC,EAACD,aAAa,CAACO,IAAI,EAAC;QAACH,IAAI,EAAEJ,aAAa,CAACI;MAAI,CAAC,CAAC;MAEnF,MAAMI,eAAe,GAAY;QAC/BC,IAAI,EAACJ,SAAS;QACdK,GAAG,EAAC,IAAI,CAAClB,SAAS,CAACmB,8BAA8B,CAACC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACT,SAAS,CAAC;OACxF;MACDR,qBAAqB,CAACkB,IAAI,CAACP,eAAe,CAAC;;IAE/Cd,IAAI,CAACE,YAAY,GAACC,qBAAqB;IACxC,OAAOH,IAAI;EACV;EAEOQ,aAAa,CAACc,QAAe,EAACC,SAAgB;IACnD,MAAMC,UAAU,GAAGN,MAAM,CAACO,IAAI,CAACH,QAAQ,CAAC;IACxC,MAAMI,WAAW,GAAG,IAAIC,WAAW,CAACH,UAAU,CAACnB,MAAM,CAAC;IACtD,MAAMuB,SAAS,GAAG,IAAIC,UAAU,CAACH,WAAW,CAAC;IAC7C,KAAI,IAAItB,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACoB,UAAU,CAACnB,MAAM,EAAED,CAAC,EAAE,EAAC;MACpCwB,SAAS,CAACxB,CAAC,CAAC,GAAGoB,UAAU,CAACM,UAAU,CAAC1B,CAAC,CAAC;;IAEzC,MAAM2B,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACJ,SAAS,CAAC,EAAE;MAAClB,IAAI,EAAEa;IAAS,CAAC,CAAC;IACrD,OAAOQ,IAAI;EACb;EAAC;qBA/BUnC,sBAAsB;EAAA;EAAA;WAAtBA,sBAAsB;IAAAqC,SAAtBrC,sBAAsB;IAAAsC,YAFrB;EAAM","names":["ImageProcessingService","constructor","sanitazer","createImages","post","postImages","productimage","postImageToFileHandle","i","length","imageFileData","imageBlob","dataURItoBlob","picByte","type","imageFile","File","name","finalFileHandle","file","url","bypassSecurityTrustResourceUrl","window","URL","createObjectURL","push","picBytes","imageType","byteString","atob","arrayBuffer","ArrayBuffer","int8Array","Uint8Array","charCodeAt","blob","Blob","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Aydii\\OneDrive\\Bureau\\angular\\front\\src\\app\\Services\\image-processing.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Post } from '../Model/post';\nimport { FileHandle } from '../Model/file-handle';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageProcessingService {\n\n  constructor(private sanitazer:DomSanitizer) { }\n  public createImages(post: Post){\n    const postImages: any[]=post.productimage;\n    const postImageToFileHandle:FileHandle[]=[];\n    for(let i=0;i<postImages.length;i++){\n      const imageFileData = postImages[i];\n\n      const imageBlob=this.dataURItoBlob(imageFileData.picByte, imageFileData.type);\n      const imageFile=new File([imageBlob],imageFileData.name,{type: imageFileData.type});\n\n      const finalFileHandle:FileHandle={\n        file:imageFile,\n        url:this.sanitazer.bypassSecurityTrustResourceUrl(window.URL.createObjectURL(imageFile))\n      };\n      postImageToFileHandle.push(finalFileHandle);\n  }\n  post.productimage=postImageToFileHandle;\n return post;\n  }\n\n  public dataURItoBlob(picBytes:string,imageType:string){\n    const byteString = window.atob(picBytes);\n    const arrayBuffer = new ArrayBuffer(byteString.length);\n    const int8Array = new Uint8Array(arrayBuffer);\n    for(let i=0; i<byteString.length; i++){\n      int8Array[i] = byteString.charCodeAt(i);\n    }\n    const blob = new Blob([int8Array], {type: imageType});\n    return blob;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}