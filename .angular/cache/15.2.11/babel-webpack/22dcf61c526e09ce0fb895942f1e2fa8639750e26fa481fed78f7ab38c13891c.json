{"ast":null,"code":"import { Post } from 'src/app/Model/post';\nimport { commentaire } from 'src/app/Model/commentaire';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/Services/post.service\";\nimport * as i3 from \"src/app/Services/comment.service\";\nexport class CreatcommentComponent {\n  constructor(route, postService, commentService) {\n    this.route = route;\n    this.postService = postService;\n    this.commentService = commentService;\n    this.newComment = new commentaire(0, '', new Date(), new Post(0, 0, '', new Date(), '', []));\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.post = JSON.parse(params['post']);\n      this.newComment.post = this.post;\n    });\n  }\n  createComment(commentText) {\n    if (commentText.trim()) {\n      const newComment = {\n        commentid: 0,\n        text: commentText,\n        comment_date: new Date(),\n        post: this.post\n      };\n      this.commentService.addComment(newComment).subscribe(response => {\n        console.log('Commentaire ajouté avec succès:', response);\n        this.post.comments = [...(this.post.comments || []), response];\n      }, error => {\n        console.error('Erreur lors de l\\'ajout du commentaire:', error);\n      });\n    } else {\n      alert('Le commentaire ne peut pas être vide.');\n    }\n  }\n  static #_ = this.ɵfac = function CreatcommentComponent_Factory(t) {\n    return new (t || CreatcommentComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.PostService), i0.ɵɵdirectiveInject(i3.CommentService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreatcommentComponent,\n    selectors: [[\"app-creatcomment\"]],\n    inputs: {\n      post: \"post\"\n    },\n    decls: 10,\n    vars: 0,\n    consts: [[\"for\", \"commentText\"], [\"id\", \"commentText\"], [\"commentText\", \"\"], [3, \"click\"]],\n    template: function CreatcommentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n        i0.ɵɵtext(2, \"Cr\\u00E9er un commentaire pour le post\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\")(4, \"label\", 0);\n        i0.ɵɵtext(5, \"Texte du commentaire :\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"textarea\", 1, 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function CreatcommentComponent_Template_button_click_8_listener() {\n          i0.ɵɵrestoreView(_r1);\n          const _r0 = i0.ɵɵreference(7);\n          return i0.ɵɵresetView(ctx.createComment(_r0.value));\n        });\n        i0.ɵɵtext(9, \"Ajouter le commentaire\");\n        i0.ɵɵelementEnd()();\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,IAAI,QAAQ,oBAAoB;AACzC,SAASC,WAAW,QAAQ,2BAA2B;;;;;AASvD,OAAM,MAAOC,qBAAqB;EAIhCC,YACUC,KAAqB,EACrBC,WAAwB,EACxBC,cAA8B;IAF9B,UAAK,GAALF,KAAK;IACL,gBAAW,GAAXC,WAAW;IACX,mBAAc,GAAdC,cAAc;IALxB,eAAU,GAAe,IAAIL,WAAW,CAAC,CAAC,EAAE,EAAE,EAAE,IAAIM,IAAI,EAAE,EAAE,IAAIP,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,IAAIO,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAMhG;EAEHC,QAAQ;IACN,IAAI,CAACJ,KAAK,CAACK,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MACnC,IAAI,CAACE,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,MAAM,CAAC,CAAS;MAC9C,IAAI,CAACK,UAAU,CAACH,IAAI,GAAG,IAAI,CAACA,IAAI;IAClC,CAAC,CAAC;EACJ;EAEAI,aAAa,CAACC,WAAmB;IAC/B,IAAIA,WAAW,CAACC,IAAI,EAAE,EAAE;MACtB,MAAMH,UAAU,GAAgB;QAC9BI,SAAS,EAAE,CAAC;QACZC,IAAI,EAAEH,WAAW;QACjBI,YAAY,EAAE,IAAIb,IAAI,EAAE;QACxBI,IAAI,EAAE,IAAI,CAACA;OACZ;MAED,IAAI,CAACL,cAAc,CAACe,UAAU,CAACP,UAAU,CAAC,CAACJ,SAAS,CACjDY,QAAQ,IAAI;QACXC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEF,QAAQ,CAAC;QACxD,IAAI,CAACX,IAAI,CAACc,QAAQ,GAAG,CAAC,IAAI,IAAI,CAACd,IAAI,CAACc,QAAQ,IAAI,EAAE,CAAC,EAAEH,QAAQ,CAAC;MAChE,CAAC,EACAI,KAAK,IAAI;QACRH,OAAO,CAACG,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MACjE,CAAC,CACF;KACF,MAAM;MACLC,KAAK,CAAC,uCAAuC,CAAC;;EAElD;EAAC;qBAtCUzB,qBAAqB;EAAA;EAAA;UAArBA,qBAAqB;IAAA0B;IAAAC;MAAAlB;IAAA;IAAAmB;IAAAC;IAAAC;IAAAC;MAAA;;QCZlCC,2BAAK;QACGA,sDAAiC;QAAAA,iBAAK;QAC1CA,2BAAK;QACsBA,sCAAsB;QAAAA,iBAAQ;QACvDA,iCAAmD;QACrDA,iBAAM;QACNA,iCAAmD;QAA3CA;UAAAA;UAAA;UAAA,OAASA,2CAAgC;QAAA,EAAC;QAACA,sCAAsB;QAAAA,iBAAS","names":["Post","commentaire","CreatcommentComponent","constructor","route","postService","commentService","Date","ngOnInit","params","subscribe","post","JSON","parse","newComment","createComment","commentText","trim","commentid","text","comment_date","addComment","response","console","log","comments","error","alert","selectors","inputs","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Aydii\\OneDrive\\Bureau\\angular\\front\\src\\app\\FrontOffice\\creatcomment\\creatcomment.component.ts","C:\\Users\\Aydii\\OneDrive\\Bureau\\angular\\front\\src\\app\\FrontOffice\\creatcomment\\creatcomment.component.html"],"sourcesContent":["import { Component, OnInit,Input } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Post } from 'src/app/Model/post';\nimport { commentaire } from 'src/app/Model/commentaire';\nimport { CommentService } from 'src/app/Services/comment.service';\nimport { PostService } from 'src/app/Services/post.service';\n\n@Component({\n  selector: 'app-creatcomment',\n  templateUrl: './creatcomment.component.html',\n  styleUrls: ['./creatcomment.component.css']\n})\nexport class CreatcommentComponent  implements OnInit{\n  @Input() post!: Post;\n  newComment: commentaire= new commentaire(0, '', new Date(), new Post(0, 0, '', new Date(), '', []));\n\n  constructor(\n    private route: ActivatedRoute,\n    private postService: PostService,\n    private commentService: CommentService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      this.post = JSON.parse(params['post']) as Post; \n      this.newComment.post = this.post;\n    });\n  }\n\n  createComment(commentText: string): void {\n    if (commentText.trim()) {\n      const newComment: commentaire = {\n        commentid: 0,\n        text: commentText,\n        comment_date: new Date(),\n        post: this.post\n      };\n  \n      this.commentService.addComment(newComment).subscribe(\n        (response) => {\n          console.log('Commentaire ajouté avec succès:', response);\n          this.post.comments = [...(this.post.comments || []), response];\n        },\n        (error) => {\n          console.error('Erreur lors de l\\'ajout du commentaire:', error);\n        }\n      );\n    } else {\n      alert('Le commentaire ne peut pas être vide.');\n    }\n  }\n  \n}\n","<div>\n    <h2>Créer un commentaire pour le post</h2>\n    <div>\n      <label for=\"commentText\">Texte du commentaire :</label>\n      <textarea id=\"commentText\" #commentText></textarea>\n    </div>\n    <button (click)=\"createComment(commentText.value)\">Ajouter le commentaire</button>\n  </div>\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}