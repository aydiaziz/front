{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Aydii/OneDrive/Bureau/angular/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Services/post.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/Services/fileupload.service\";\nimport * as i4 from \"@angular/platform-browser\";\nexport class CreatpostComponent {\n  constructor(postService, formBuilder, fileUploadService, sanitizer) {\n    this.postService = postService;\n    this.formBuilder = formBuilder;\n    this.fileUploadService = fileUploadService;\n    this.sanitizer = sanitizer;\n    this.posts = [];\n    this.selectedFile = null;\n    this.uploadError = null;\n    this.postForm = this.formBuilder.group({\n      content: ['', Validators.required],\n      img: ['']\n    });\n  }\n  addPost() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.postForm.invalid) {\n        return; // Prevent submission if form is invalid\n      }\n\n      const post = _this.postForm.value;\n      post.publication_date = new Date(); // Add current date\n      try {\n        let uploadResponse;\n        // Upload the image if selected\n        if (_this.selectedFile) {\n          uploadResponse = yield _this.fileUploadService.uploadFile(_this.selectedFile).toPromise();\n          // Handle upload response (e.g., success/failure message)\n          if (uploadResponse.error) {\n            _this.uploadError = uploadResponse.error;\n            return; // Prevent further processing in case of upload error\n          }\n          // You might want to update the post object's image property here based on uploadResponse\n        }\n        // Send the post data along with the image (if uploaded)\n        const response = yield _this.postService.addPost(post).toPromise();\n        console.log('Post added successfully:', response); // Handle successful response\n        _this.postForm.reset(); // Reset the form after successful submission\n        _this.selectedFile = null;\n        _this.uploadError = null;\n      } catch (error) {\n        if (error instanceof HttpErrorResponse) {\n          console.error('Error adding post:', error.message);\n        } else {\n          console.error('Unexpected error:', error);\n        }\n        _this.uploadError = null;\n      }\n    })();\n  }\n  onFileSelected(event) {\n    this.selectedFile = event.target.files[0];\n    this.uploadError = null; // Clear previous upload error if any\n    if (event.target.files) {\n      const file = event.target.files[0];\n      const fileHandle = {\n        file: file,\n        url: TH\n      };\n    }\n  }\n  loadPosts() {\n    this.postService.getAllPosts().subscribe(posts => {\n      this.posts = posts;\n    }, error => {\n      console.error('Error loading posts:', error);\n    });\n  }\n  ngOnInit() {\n    this.loadPosts();\n  }\n  static #_ = this.ɵfac = function CreatpostComponent_Factory(t) {\n    return new (t || CreatpostComponent)(i0.ɵɵdirectiveInject(i1.PostService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.FileuploadService), i0.ɵɵdirectiveInject(i4.DomSanitizer));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreatpostComponent,\n    selectors: [[\"app-creatpost\"]],\n    decls: 9,\n    vars: 1,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"content\"], [\"formControlName\", \"content\"], [\"for\", \"image\"], [\"type\", \"file\", \"id\", \"image\", \"name\", \"image\", 3, \"change\"], [\"type\", \"submit\"]],\n    template: function CreatpostComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function CreatpostComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.addPost();\n        });\n        i0.ɵɵelementStart(1, \"label\", 1);\n        i0.ɵɵtext(2, \"Content:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"textarea\", 2);\n        i0.ɵɵelementStart(4, \"label\", 3);\n        i0.ɵɵtext(5, \"Image:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"input\", 4);\n        i0.ɵɵlistener(\"change\", function CreatpostComponent_Template_input_change_6_listener($event) {\n          return ctx.onFileSelected($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 5);\n        i0.ɵɵtext(8, \"Submit\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.postForm);\n      }\n    },\n    dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AAInE,SAASC,iBAAiB,QAAQ,sBAAsB;;;;;;AASxD,OAAM,MAAOC,kBAAkB;EAM7BC,YACUC,WAAwB,EACxBC,WAAwB,EACxBC,iBAAoC,EACpCC,SAAuB;IAHvB,gBAAW,GAAXH,WAAW;IACX,gBAAW,GAAXC,WAAW;IACX,sBAAiB,GAAjBC,iBAAiB;IACjB,cAAS,GAATC,SAAS;IARnB,UAAK,GAAW,EAAE;IAClB,iBAAY,GAAgB,IAAI;IAChC,gBAAW,GAAgB,IAAI;IAQ7B,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACH,WAAW,CAACI,KAAK,CAAC;MACrCC,OAAO,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MAClCC,GAAG,EAAE,CAAC,EAAE;KACT,CAAC;EACJ;EAEMC,OAAO;IAAA;IAAA;MACT,IAAI,KAAI,CAACL,QAAQ,CAACM,OAAO,EAAE;QAC1B,OAAO,CAAC;;;MAGT,MAAMC,IAAI,GAAS,KAAI,CAACP,QAAQ,CAACQ,KAAK;MACtCD,IAAI,CAACE,gBAAgB,GAAG,IAAIC,IAAI,EAAE,CAAC,CAAC;MAEpC,IAAI;QACH,IAAIC,cAAmB;QAEvB;QACA,IAAI,KAAI,CAACC,YAAY,EAAE;UACtBD,cAAc,SAAS,KAAI,CAACb,iBAAiB,CAACe,UAAU,CAAC,KAAI,CAACD,YAAY,CAAC,CAACE,SAAS,EAAE;UACvF;UACA,IAAIH,cAAc,CAACI,KAAK,EAAE;YACzB,KAAI,CAACC,WAAW,GAAGL,cAAc,CAACI,KAAK;YACvC,OAAO,CAAC;;UAET;;QAGD;QACA,MAAME,QAAQ,SAAS,KAAI,CAACrB,WAAW,CAACS,OAAO,CAACE,IAAI,CAAC,CAACO,SAAS,EAAE;QACjEI,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,QAAQ,CAAC,CAAC,CAAC;QACnD,KAAI,CAACjB,QAAQ,CAACoB,KAAK,EAAE,CAAC,CAAC;QACvB,KAAI,CAACR,YAAY,GAAG,IAAI;QACxB,KAAI,CAACI,WAAW,GAAG,IAAI;OACvB,CAAC,OAAOD,KAAK,EAAE;QACf,IAAIA,KAAK,YAAYtB,iBAAiB,EAAE;UACvCyB,OAAO,CAACH,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACM,OAAO,CAAC;SAClD,MAAM;UACNH,OAAO,CAACH,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;;QAE1C,KAAI,CAACC,WAAW,GAAG,IAAI;;IACvB;EACF;EAEAM,cAAc,CAACC,KAAU;IACxB,IAAI,CAACX,YAAY,GAAGW,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IACzC,IAAI,CAACT,WAAW,GAAG,IAAI,CAAC,CAAC;IAC3B,IAAIO,KAAK,CAACC,MAAM,CAACC,KAAK,EAAC;MACrB,MAAMC,IAAI,GAACH,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAChC,MAAME,UAAU,GAAa;QAC3BD,IAAI,EAAEA,IAAI;QACVE,GAAG,EAAEC;OACN;;EAEF;EAGHC,SAAS;IACP,IAAI,CAAClC,WAAW,CAACmC,WAAW,EAAE,CAACC,SAAS,CACrCC,KAAK,IAAI;MACR,IAAI,CAACA,KAAK,GAAGA,KAAK;IACpB,CAAC,EACAlB,KAAK,IAAI;MACRG,OAAO,CAACH,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CACF;EACH;EAEAmB,QAAQ;IACN,IAAI,CAACJ,SAAS,EAAE;EAClB;EAAC;qBAlFUpC,kBAAkB;EAAA;EAAA;UAAlBA,kBAAkB;IAAAyC;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCd/BC,+BAAoD;QAAvBA;UAAA,OAAYC,aAAS;QAAA,EAAC;QACjDD,gCAAqB;QAAAA,wBAAQ;QAAAA,iBAAQ;QACrCA,8BAA+C;QAE/CA,gCAAmB;QAAAA,sBAAM;QAAAA,iBAAQ;QACjCA,gCAA8E;QAAlCA;UAAA,OAAUC,0BAAsB;QAAA,EAAC;QAA7ED,iBAA8E;QAE9EA,iCAAsB;QAAAA,sBAAM;QAAAA,iBAAS;;;QAPjCA,wCAAsB","names":["Validators","HttpErrorResponse","CreatpostComponent","constructor","postService","formBuilder","fileUploadService","sanitizer","postForm","group","content","required","img","addPost","invalid","post","value","publication_date","Date","uploadResponse","selectedFile","uploadFile","toPromise","error","uploadError","response","console","log","reset","message","onFileSelected","event","target","files","file","fileHandle","url","TH","loadPosts","getAllPosts","subscribe","posts","ngOnInit","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Aydii\\OneDrive\\Bureau\\angular\\front\\src\\app\\FrontOffice\\creatpost\\creatpost.component.ts","C:\\Users\\Aydii\\OneDrive\\Bureau\\angular\\front\\src\\app\\FrontOffice\\creatpost\\creatpost.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { PostService } from 'src/app/Services/post.service';\nimport { Post } from 'src/app/Model/post';\nimport { FileuploadService } from 'src/app/Services/fileupload.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FileHandle } from 'src/app/Model/file-handle';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-creatpost',\n  templateUrl: './creatpost.component.html',\n  styleUrls: ['./creatpost.component.css']\n})\nexport class CreatpostComponent implements OnInit {\n  postForm!: FormGroup;\n  posts: Post[] = [];\n  selectedFile: File | null = null;\n  uploadError: File | null = null;\n\n  constructor(\n    private postService: PostService,\n    private formBuilder: FormBuilder,\n    private fileUploadService: FileuploadService,\n    private sanitizer: DomSanitizer\n  ) {\n    this.postForm = this.formBuilder.group({\n      content: ['', Validators.required],\n      img: ['']\n    });\n  }\n  \n  async addPost(): Promise<void> {\n      if (this.postForm.invalid) {\n       return; // Prevent submission if form is invalid\n      }\n    \n      const post: Post = this.postForm.value;\n      post.publication_date = new Date(); // Add current date\n    \n      try {\n       let uploadResponse: any;\n    \n       // Upload the image if selected\n       if (this.selectedFile) {\n        uploadResponse = await this.fileUploadService.uploadFile(this.selectedFile).toPromise();\n        // Handle upload response (e.g., success/failure message)\n        if (uploadResponse.error) {\n         this.uploadError = uploadResponse.error;\n         return; // Prevent further processing in case of upload error\n        }\n        // You might want to update the post object's image property here based on uploadResponse\n       }\n    \n       // Send the post data along with the image (if uploaded)\n       const response = await this.postService.addPost(post).toPromise();\n       console.log('Post added successfully:', response); // Handle successful response\n       this.postForm.reset(); // Reset the form after successful submission\n       this.selectedFile = null;\n       this.uploadError = null;\n      } catch (error) {\n       if (error instanceof HttpErrorResponse) {\n        console.error('Error adding post:', error.message);\n       } else {\n        console.error('Unexpected error:', error);\n       }\n       this.uploadError = null;\n      }\n     }\n    \n     onFileSelected(event: any): void {\n      this.selectedFile = event.target.files[0];\n      this.uploadError = null; // Clear previous upload error if any\n    if (event.target.files){\n      const file=event.target.files[0];\n      const fileHandle: FileHandle={\n        file: file,\n        url: TH\n      }\n    }\n     }\n    \n\n  loadPosts(): void {\n    this.postService.getAllPosts().subscribe(\n      (posts) => {\n        this.posts = posts;\n      },\n      (error) => {\n        console.error('Error loading posts:', error);\n      }\n    );\n  }\n\n  ngOnInit(): void {\n    this.loadPosts();\n  }\n}\n","<form [formGroup]=\"postForm\" (ngSubmit)=\"addPost()\">\n  <label for=\"content\">Content:</label>\n  <textarea formControlName=\"content\"></textarea>\n\n  <label for=\"image\">Image:</label>\n  <input type=\"file\" id=\"image\" name=\"image\"  (change)=\"onFileSelected($event)\">\n\n  <button type=\"submit\">Submit</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}